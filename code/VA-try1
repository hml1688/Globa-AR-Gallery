<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>V&A artworks · by place & date range</title>
<style>
  body{font-family:Arial,Helvetica,sans-serif;margin:1rem}
  form{margin-bottom:1rem}
  input{width:6rem;margin-right:.5rem;padding:.25rem}
  button{padding:.3rem .8rem}
  #grid{display:flex;flex-wrap:wrap;gap:1rem}
  .item{width:200px;text-align:center}
  .item img{width:100%;border-radius:6px;cursor:pointer}
  .msg{margin-top:1rem;font-style:italic}
</style>
</head>
<body>

<h2>Victoria & Albert Museum · China</h2>

<form id="qry">
  From&nbsp;year: <input id="yearFrom" placeholder="1800" required>
  To&nbsp;year:&nbsp;<input id="yearTo"   placeholder="1900" required>
  <button type="submit">Search</button>
</form>

<div id="grid"></div>
<p class="msg" id="msg"></p>

<script>
const PLACE       = 'China';
const SAMPLE_SIZE = 12;     // how many cards to show
const PAGE_SIZE   = 100;    // V&A API max is 100

const grid = document.getElementById('grid');
const msg  = document.getElementById('msg');

document.getElementById('qry').addEventListener('submit', e => {
  e.preventDefault();
  const f = Number(yearFrom.value), t = Number(yearTo.value);
  if (isNaN(f) || isNaN(t)) { alert('Enter valid years'); return; }
  fetchArtworks(Math.min(f,t), Math.max(f,t));
});

async function fetchArtworks(fromY, toY){
  grid.innerHTML = '';
  msg.textContent = 'Loading…';

  const endpoint = `https://api.vam.ac.uk/v2/objects/search?`
    + `q_place_name=${encodeURIComponent(PLACE)}`
    + `&year_made_from=${fromY}&year_made_to=${toY}`
    + `&images_exist=1&page_size=${PAGE_SIZE}`;

  try{
    const res = await fetch(endpoint).then(r=>r.json());
    const records   = res.records || [];
    const totalHits = res.info?.record_count ?? res.info?.result_count ?? records.length;

    /* ---- keep only records WITH thumbnail AND whose date overlaps ---- */
    const eligible = records.filter(r=>{
      if(!r._images?._primary_thumbnail) return false;
      return dateOverlaps(r._primaryDate, fromY, toY);
    });

    if(!eligible.length){
      msg.textContent = `0 of ${totalHits} objects have images / dates in range.`;
      return;
    }

    /* ---- random sample up to SAMPLE_SIZE ---- */
    const picks = shuffle(eligible).slice(0, SAMPLE_SIZE);
    picks.forEach(addItem);

    msg.textContent =
      `Showing ${picks.length} of ${totalHits} objects from ${fromY}–${toY}.`;
  }catch(err){
    console.error(err);
    msg.textContent = 'Error retrieving data.';
  }
}

function addItem(rec){
  const thumb = rec._images._primary_thumbnail;
  const iiif  = rec._images._iiif_image_base_url; // may be undefined

  const objectType = rec.objectType || rec._primaryObjectName || 'Object';
  const title      = rec._primaryTitle || objectType;
  const dateStr    = rec._primaryDate || '';
  const maker      = rec._primaryMaker?.name || 'unknown';

  grid.insertAdjacentHTML('beforeend',`
    <div class="item">
      <img src="${thumb}" alt="${title}"
           ${iiif ? `onclick="window.open('${iiif}full/768,/0/default.jpg','_blank')"` : ''}>
      <p><strong>${title}</strong><br>${dateStr}<br><em>${maker}</em></p>
    </div>`);
}

/* ---------- helpers ---------- */
function shuffle(a){
  for(let i=a.length-1;i>0;i--){
    const j=Math.floor(Math.random()*(i+1));
    [a[i],a[j]]=[a[j],a[i]];
  }
  return a;
}
function dateOverlaps(dateStr, fromY, toY){
  const yrs = (dateStr||'').match(/-?\d{1,4}/g)?.map(Number) || [];
  if(!yrs.length) return true;                 // unknown date ⇒ keep
  const min = Math.min(...yrs), max = Math.max(...yrs);
  return !(max < fromY || min > toY);
}
</script>
</body>
</html>

